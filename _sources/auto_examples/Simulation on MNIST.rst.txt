
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/Simulation on MNIST.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_Simulation on MNIST.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_Simulation on MNIST.py:


Simulation on Mnist Dataset
===========================

.. GENERATED FROM PYTHON SOURCE LINES 6-111

.. code-block:: default

    import json

    import pandas as pd
    import ray
    import seaborn as sns

    from blades.datasets import MNIST
    from blades.models.mnist import MLP
    from blades.simulator import Simulator

    # Initialize Ray
    ray.init()
    # ray.init(address='auto')


    # mnist = MNIST(data_root="/dbfs/data", train_bs=32, num_clients=20)  # built-in federated MNIST dataset
    mnist = MNIST(data_root="./data", train_bs=32, num_clients=20)  # built-in federated MNIST dataset

    # configuration parameters
    conf_params = {
        "dataset": mnist,
    #     "aggregator": "trimmedmean",  # aggregation
        "num_byzantine": 8,  # number of Byzantine input
        "attack": "ipm",  # attack strategy
        # "log_path": "dbfs/outputs",
        "attack_kws": {   
                              "epsilon": 100,
                         },
        "num_actors": 1,  # number of training actors
        "seed": 1,  # reproducibility
    }

    run_params = {
    #     "model": model,  # global model
        "server_optimizer": 'SGD',  # ,server_opt  # server optimizer
        "client_optimizer": 'SGD',  # client optimizer
        "loss": "crossentropy",  # loss function
        "global_rounds": 10,  # number of global rounds
        "local_steps": 10,  # number of steps per round
        "server_lr": 1,
        "client_lr": 0.1,  # learning rate
    }

    aggs = {
        'mean': {},
        'trimmedmean': {"num_byzantine": 8},
        'geomed': {},
        'median': {},
        'clippedclustering': {},
    }


    for agg in aggs:
        conf_params['aggregator'] = agg
        conf_params['log_path'] = f"./outputs/{agg}"
    #     conf_params['log_path'] = f"dbfs/outputs/{k}"
        model = MLP()
        run_params['model'] = model
        simulator = Simulator(**conf_params)
        simulator.run(**run_params)


    def read_json(path):
        validation = []
        with open(path, "r") as f:
            for line in f:
                line=line.strip().replace("'", '"')
                line = line.replace("nan", '"nan"')
                try:
                    data = json.loads(line)
                except:
                    print(line)
                    raise
                if data['_meta']['type'] == 'test':
                    validation.append(data)
        return validation

    def transform(entry, agg):  
        return {
            'Round Number': entry['Round'],
            'Accuracy (%)': entry['top1'],
            "Loss": entry['Loss'],
            'AGG': agg,
        }



    df = []
    for agg in aggs:
        path = f"./outputs/{agg}/stats"
        validation_entries = read_json(path)
        df += list(map(lambda x: transform(x, agg=agg), validation_entries))
    df = pd.DataFrame(df)


    g = sns.lineplot(
        data=df, 
        x="Round Number", y="Accuracy (%)",  
        hue="AGG",
        ci=None,
    )






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_examples_Simulation on MNIST.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: Simulation on MNIST.py <Simulation on MNIST.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: Simulation on MNIST.ipynb <Simulation on MNIST.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
