
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/customize_attack.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_customize_attack.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_customize_attack.py:


Customization of attack strategy
=================================

.. GENERATED FROM PYTHON SOURCE LINES 6-55

.. code-block:: default



    import ray

    from blades.client import ByzantineClient
    from blades.simulator import Simulator
    from blades.datasets import MNIST
    from blades.models.mnist import MLP

    mnist = MNIST(data_root="./data", train_bs=32, num_clients=10)  # built-in federated MNIST dataset


    class MaliciousClient(ByzantineClient):
        def __init__(self, *args, **kwargs):
            super().__init__(*args, **kwargs)
    
        def omniscient_callback(self, simulator):
            updates = []
            for w in simulator.get_clients():
                if not w.is_byzantine():
                    updates.append(w.get_update())
            self.save_update(-100 * (sum(updates)) / len(updates))


    # configuration parameters
    conf_params = {
        "dataset": mnist,
        "aggregator": "mean",  # defense: robust aggregation
        "num_actors": 4,  # number of training actors
        "seed": 1,  # reproducibility
    }

    ray.init(num_gpus=0, local_mode=True)
    simulator = Simulator(**conf_params)

    attackers = [MaliciousClient() for _ in range(5)]
    simulator.register_attackers(attackers)

    # runtime parameters
    run_params = {
        "model": MLP(),  # global model
        "server_optimizer": 'SGD',  # server optimizer
        "client_optimizer": 'SGD',  # client optimizer
        "loss": "crossentropy",  # loss function
        "global_rounds": 400,  # number of global rounds
        "local_steps": 2,  # number of steps per round
        "client_lr": 0.1,  # learning rate
    }
    simulator.run(**run_params)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_examples_customize_attack.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: customize_attack.py <customize_attack.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: customize_attack.ipynb <customize_attack.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
