{
 "cells": [
  {
   "cell_type": "markdown",
   "source": [
    "# Comparing Build-in Aggregation Schemes\n",
    "\n",
    "This example demonstrates the comparison of eight build-in aggregation schemes. We draw 100 samples from two normal distributions with different mean and co-variance. The samples are then aggregated using the build-in aggregation rules."
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "import torch\n",
    "from blades.client import BladesClient\n",
    "from blades.aggregators import Krum, Median, Geomed, Autogm, Mean, Clustering, Trimmedmean, Clippedclustering\n",
    "# sphinx_gallery_thumbnail_path = '../../_static/demo.png'"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import os\n",
    "from scipy.stats import skew\n",
    "import scipy.stats as st\n",
    "from sklearn.datasets import make_blobs\n",
    "\n",
    "plt.rcParams['axes.linewidth'] = 1.5 #set the value globally\n",
    "plt.rcParams[\"font.weight\"] = \"bold\"\n",
    "plt.rcParams[\"font.size\"] = 16\n",
    "plt.rcParams[\"axes.labelweight\"] = \"bold\""
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "np.random.seed(1)\n",
    "sz = 40\n",
    "sample_sz = 80\n",
    "\n",
    "mean = np.array((0, 0))\n",
    "cov = [[20, 0], [0, 20]]\n",
    "benign = np.random.multivariate_normal(mean, cov, 60)\n",
    "mean = np.array((30, 30))\n",
    "cov = [[60, 0], [0, 60]]\n",
    "outliers = np.concatenate([np.random.multivariate_normal(mean, cov, 40)])\n",
    "all_data = np.concatenate([benign, outliers])\n",
    "\n",
    "all_data_tensor = torch.Tensor(np.concatenate([benign, outliers]))\n",
    "\n",
    "\n",
    "aggs = [Mean(),\n",
    "        Krum(len(all_data), len(outliers)),\n",
    "        Geomed(),\n",
    "        Median(),\n",
    "        Autogm(lamb=1.0),\n",
    "        Trimmedmean(num_byzantine=len(outliers)),\n",
    "        Clustering(),\n",
    "        Clippedclustering(),\n",
    "       ]"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "fig, axs = plt.subplots(figsize=(8,8))\n",
    "\n",
    "\n",
    "ax = axs\n",
    "ax.scatter(benign[:, 0], benign[:, 1], s=sample_sz, alpha=0.6, color='r', linewidths=0.2, edgecolors='black')\n",
    "ax.scatter(outliers[:, 0], outliers[:, 1], s=sample_sz, color=[0.,  0.7, 0.,  1. ], linewidths=0.2, edgecolors='black')\n",
    "\n",
    "def plot_agg(ax, agg):\n",
    "    target = agg(all_data_tensor).cpu().detach().numpy()\n",
    "    ax.scatter(target[0], target[1], s=sz * 3, label=type(agg).__name__, linewidths=0.3, edgecolors='black')\n",
    "\n",
    "list(map(lambda agg: plot_agg(ax, agg), aggs))\n",
    "ax.set_xticks([])\n",
    "ax.set_yticks([])\n",
    "ax.legend()\n",
    "\n",
    "fig.tight_layout(pad=0.0, w_pad=0.6, h_pad=0.5)\n",
    "# plt.savefig('../../_static/demo.png')"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "In this example, the results of **Mean** and **Clustering** deviated away by the outliers. All the other are in side the range of benign data"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "id": "ebd566ad",
   "metadata": {},
   "source": [
    "In this example, the results of **Mean** and **Clustering** deviated away by the outliers. All the other are in side the range of benign data"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}